package rw.bk.filmfan.activities.home;import androidx.appcompat.app.AppCompatActivity;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.os.Bundle;import android.util.Log;import android.view.View;import android.widget.ImageView;import android.widget.ProgressBar;import android.widget.Toast;import com.android.volley.Request;import com.android.volley.RequestQueue;import com.android.volley.Response;import com.android.volley.VolleyError;import com.android.volley.toolbox.JsonObjectRequest;import com.android.volley.toolbox.Volley;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.List;import rw.bk.filmfan.BuildConfig;import rw.bk.filmfan.R;import rw.bk.filmfan.activities.favorite_movie.favorite;import rw.bk.filmfan.activities.home.adapter.movie_adapter;import rw.bk.filmfan.activities.login.login;import rw.bk.filmfan.activities.movie_details.details;import rw.bk.filmfan.configs.config;import rw.bk.filmfan.helpers.clickListener;import rw.bk.filmfan.helpers.prefManager;import rw.bk.filmfan.helpers.staticHelpers;import rw.bk.filmfan.models.movie;public class home extends AppCompatActivity {    RecyclerView movie_list;    ProgressBar loading;    RecyclerView.LayoutManager recyclerViewlayoutManager;    movie_adapter recyclerViewadapter;    List<movie> movies;    movie movie_data;    config conf;    staticHelpers StaticHelpers;    ImageView favourite;    SharedPreferences pref;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_home);        pref=getSharedPreferences("filmfan", 0);        StaticHelpers=new staticHelpers();        favourite=findViewById(R.id.favourite);        favourite.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                boolean isLogin=prefManager.checkUser(pref);                if(isLogin==false){                    Intent goLogin=new Intent(home.this, login.class);                    startActivity(goLogin);                }else{                    Intent goFavorite=new Intent(home.this, favorite.class);                    startActivity(goFavorite);                }            }        });        movie_list=findViewById(R.id.movieList);        loading=findViewById(R.id.loading);        movies=new ArrayList<>();        movie_list.setHasFixedSize(true);        recyclerViewlayoutManager = new LinearLayoutManager(this);        movie_list.setLayoutManager(recyclerViewlayoutManager);        recyclerViewadapter = new movie_adapter(movies,this);        movie_list.setAdapter(recyclerViewadapter);        //click listener when user click on a specific movie to view movie details        recyclerViewadapter.setOnMovieClickListener(new clickListener() {            @Override            public void onItemClick(int postion) {                // carry movie id to details activity                int movie_id=movies.get(postion).getId();                Intent goToDetailsIntent = new Intent(home.this, details.class);                Bundle bundle = new Bundle();                bundle.putInt("id", movie_id);                goToDetailsIntent.putExtras(bundle);                startActivity(goToDetailsIntent);            }        });        // call get movie method with page 1 in parameter        getMovie(1);    }    public void getMovie(int page){        // show progress loading        loading.setVisibility(View.VISIBLE);        movie_list.setVisibility(View.INVISIBLE);        // get now playing movie        String url = conf.NOW_PLAYING+"?api_key="+BuildConfig.api_key+"&language="+StaticHelpers.language+"&page="+page;        RequestQueue requestQueue = Volley.newRequestQueue(this);        JsonObjectRequest movieRequest = new JsonObjectRequest(Request.Method.GET,url,null,                new Response.Listener<JSONObject>() {                    @Override                    public void onResponse(JSONObject response) {                        movie_list.setVisibility(View.VISIBLE);                        loading.setVisibility(View.INVISIBLE);                        try{//                            Log.i("object",response.getJSONArray("results").toString());                            decodeMovies(response.getJSONArray("results"));                        } catch(JSONException e){                            Log.e("error",e.getMessage());                        }                    }                },                new Response.ErrorListener() {                    @Override                    public void onErrorResponse(VolleyError error) {                        loading.setVisibility(View.INVISIBLE);                        Log.i("error",error.getMessage());                        Toast.makeText(home.this, "something went wrong, please try again", Toast.LENGTH_SHORT).show();                    }                }        );        requestQueue.add(movieRequest);    }    // method to decode and sort movies json    public void decodeMovies(JSONArray jsonMovies){        // clean up the list        movies.clear();        try        {            //sort movies alphabetically            // sort alphabetically            JSONArray sortedMovies = new JSONArray();            // list of json objects            List<JSONObject> movieObjects = new ArrayList<JSONObject>();            for (int i = 0; i < jsonMovies.length(); i++) {                movieObjects.add(jsonMovies.getJSONObject(i));            }            // sort movies alphabetically by using their titles            Collections.sort( movieObjects, new Comparator<JSONObject>() {                @Override                public int compare(JSONObject a, JSONObject b) {                    String title_one = new String();                    String title_two = new String();                    try {                        title_one = (String) a.get("title");                        title_two = (String) b.get("title");                    }                    catch (JSONException e) {                        e.printStackTrace();                    }                    return title_one.compareToIgnoreCase(title_two);                }            });            // copy sorted movies to new jsonarray for sorted movies            for (int i = 0; i < jsonMovies.length(); i++) {                sortedMovies.put(movieObjects.get(i));            }             //add movies to list and also notify our adapter            for(int a=0;a<sortedMovies.length();a++)            {                JSONObject obj=sortedMovies.getJSONObject(a);                int id=obj.getInt("id");                String title=obj.getString("title");                String release_date=obj.getString("release_date");                String poster_path=obj.getString("poster_path");                double vote_count =obj.getDouble("vote_count");                double vote_average=obj.getDouble("vote_average")/2;                double popularity=obj.getDouble("popularity");                movie_data=new movie();                movie_data.setId(id);                movie_data.setTitle(title);                movie_data.setRelease_date(release_date);                movie_data.setPoster_path(poster_path);                movie_data.setVote_count(vote_count);                movie_data.setVote_average(vote_average);                movie_data.setPopularity(popularity);                movies.add(movie_data);                recyclerViewadapter.notifyDataSetChanged();            }        }        catch(JSONException e)        {            e.printStackTrace();        }    }}