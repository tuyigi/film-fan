package rw.bk.filmfan.activities.favorite_movie;import androidx.appcompat.app.AppCompatActivity;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import android.content.SharedPreferences;import android.os.Bundle;import android.util.Log;import android.view.View;import android.widget.ImageView;import android.widget.ProgressBar;import android.widget.Toast;import com.android.volley.Request;import com.android.volley.RequestQueue;import com.android.volley.Response;import com.android.volley.VolleyError;import com.android.volley.toolbox.JsonObjectRequest;import com.android.volley.toolbox.Volley;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.List;import rw.bk.filmfan.BuildConfig;import rw.bk.filmfan.R;import rw.bk.filmfan.activities.home.adapter.movie_adapter;import rw.bk.filmfan.activities.home.home;import rw.bk.filmfan.configs.config;import rw.bk.filmfan.helpers.prefManager;import rw.bk.filmfan.helpers.staticHelpers;import rw.bk.filmfan.models.movie;public class favorite extends AppCompatActivity {    ImageView back;    SharedPreferences pref;    RecyclerView favoritemovie_list;    ProgressBar loading;    RecyclerView.LayoutManager recyclerViewlayoutManager;    movie_adapter favoriteAdapter;    List<movie> favorite_movies;    movie movie_data;    config conf;    staticHelpers StaticHelpers;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_favorite);        pref=getSharedPreferences("filmfan", 0);        back=findViewById(R.id.back);        back.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                finish();            }        });        StaticHelpers=new staticHelpers();        favoritemovie_list=findViewById(R.id.favorite_movie);        loading=findViewById(R.id.loading);        favoritemovie_list=findViewById(R.id.favorite_movie);        favorite_movies=new ArrayList<>();        favoritemovie_list.setHasFixedSize(true);        recyclerViewlayoutManager = new LinearLayoutManager(this);        favoritemovie_list.setLayoutManager(recyclerViewlayoutManager);        favoriteAdapter = new movie_adapter(favorite_movies,this);        favoritemovie_list.setAdapter(favoriteAdapter);        getFavoriteMovie();    }    // get favorite movies    public void getFavoriteMovie(){        loading.setVisibility(View.VISIBLE);        favoritemovie_list.setVisibility(View.GONE);        // get favorite movie        String url = conf.GET_FAVORITE_MOVIE+"?api_key="+ BuildConfig.api_key+"&session_id="+ prefManager.getUserSession(pref)+"&language="+StaticHelpers.language+"&sort_by="+StaticHelpers.sortBy[1]+"&page=1";        RequestQueue requestQueue = Volley.newRequestQueue(this);        JsonObjectRequest movieRequest = new JsonObjectRequest(Request.Method.GET,url,null,                new Response.Listener<JSONObject>() {                    @Override                    public void onResponse(JSONObject response) {                        try{                            loading.setVisibility(View.GONE);                            favoritemovie_list.setVisibility(View.VISIBLE);                            decodeFavoriteMovies(response.getJSONArray("results"));                        } catch(JSONException e){                            Log.e("error",e.getMessage());                        }                    }                },                new Response.ErrorListener() {                    @Override                    public void onErrorResponse(VolleyError error) {                        loading.setVisibility(View.INVISIBLE);                        Log.i("error",error.getMessage());                        Toast.makeText(favorite.this, "something went wrong, please try again", Toast.LENGTH_SHORT).show();                    }                }        );        requestQueue.add(movieRequest);    }    public void decodeFavoriteMovies(JSONArray favoriteM){        // clean up the list        favorite_movies.clear();        try        {            //add movies to list and also notify our adapter            for(int a=0;a<favoriteM.length();a++)            {                JSONObject obj=favoriteM.getJSONObject(a);                int id=obj.getInt("id");                String title=obj.getString("title");                String release_date=obj.getString("release_date");                String poster_path=obj.getString("poster_path");                double vote_count =obj.getDouble("vote_count");                double vote_average=obj.getDouble("vote_average")/2;                double popularity=obj.getDouble("popularity");                movie_data=new movie();                movie_data.setId(id);                movie_data.setTitle(title);                movie_data.setRelease_date(release_date);                movie_data.setPoster_path(poster_path);                movie_data.setVote_count(vote_count);                movie_data.setVote_average(vote_average);                movie_data.setPopularity(popularity);                favorite_movies.add(movie_data);                favoriteAdapter.notifyDataSetChanged();            }        }        catch(JSONException e)        {            e.printStackTrace();        }    }}