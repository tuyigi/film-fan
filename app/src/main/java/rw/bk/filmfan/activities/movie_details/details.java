package rw.bk.filmfan.activities.movie_details;import androidx.appcompat.app.AppCompatActivity;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import android.content.Intent;import android.content.SharedPreferences;import android.os.Bundle;import android.util.Log;import android.view.View;import android.widget.Button;import android.widget.ImageView;import android.widget.RatingBar;import android.widget.TextView;import android.widget.Toast;import com.android.volley.Request;import com.android.volley.RequestQueue;import com.android.volley.Response;import com.android.volley.VolleyError;import com.android.volley.toolbox.JsonObjectRequest;import com.android.volley.toolbox.Volley;import com.squareup.picasso.Picasso;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.Date;import java.util.HashMap;import java.util.List;import rw.bk.filmfan.BuildConfig;import rw.bk.filmfan.R;import rw.bk.filmfan.activities.home.adapter.movie_adapter;import rw.bk.filmfan.activities.home.home;import rw.bk.filmfan.activities.login.login;import rw.bk.filmfan.activities.movie_details.adapter.genre_adapter;import rw.bk.filmfan.configs.config;import rw.bk.filmfan.helpers.clickListener;import rw.bk.filmfan.helpers.dateHelpers;import rw.bk.filmfan.helpers.prefManager;import rw.bk.filmfan.helpers.staticHelpers;import rw.bk.filmfan.models.genre;import rw.bk.filmfan.models.movie;import static rw.bk.filmfan.helpers.dateHelpers.convertdate;public class details extends AppCompatActivity {    ImageView favourite;    Button button_rate_movie;    TextView rate;    ImageView back;    TextView title;    TextView release_year;    ImageView movie_poster;    TextView overview;    RatingBar movie_rate;    RecyclerView genres_list;    RecyclerView recommended_movie;    config conf;    staticHelpers StaticHelpers;    dateHelpers DateHelpers;    RecyclerView.LayoutManager recyclerViewlayoutManager;    RecyclerView.LayoutManager recyclerViewlayoutManagertwo;    genre_adapter genresAdapter;    List<genre> genres;    genre genre_data;    movie_adapter movieAdapter;    List<movie> movies;    movie movie_data;    SharedPreferences pref;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_details);        Bundle bundle = getIntent().getExtras();        int movie_id = bundle.getInt("id");        pref=getSharedPreferences("filmfan", 0);        StaticHelpers=new staticHelpers();        favourite=findViewById(R.id.favourite);        if(prefManager.checkUser(pref)==true){            favourite.setVisibility(View.VISIBLE);        }else{            favourite.setVisibility(View.INVISIBLE);        }        favourite.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                String id=Integer.toString(movie_id).toString();                HashMap<String,String> favoriteBody= new HashMap<String, String>();                favoriteBody.put("media_type","movie");                favoriteBody.put("media_id",id);                favoriteBody.put("favorite","true");                markFavoriteMovie(favoriteBody);            }        });        button_rate_movie=findViewById(R.id.button_rate_movie);        title=findViewById(R.id.title);        release_year=findViewById(R.id.release_year);        movie_poster=findViewById(R.id.poster);        overview=findViewById(R.id.overview);        movie_rate=findViewById(R.id.movie_rate);        genres_list=findViewById(R.id.genres_list);        recommended_movie=findViewById(R.id.recommended_movie);        rate=findViewById(R.id.rate);        rate.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                // check if he logged in                if(prefManager.checkUser(pref)==true){                    button_rate_movie.setVisibility(view.VISIBLE);                    rate.setVisibility(View.GONE);                    movie_rate.setIsIndicator(false);                    Toast.makeText(details.this, "You can now rate", Toast.LENGTH_SHORT).show();                }                // allow to rate            }        });        // rate movie        button_rate_movie.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                String val=String. valueOf(movie_rate.getRating());                HashMap<String,String> rateBody= new HashMap<String, String>();                rateBody.put("value",val);                rateMovie(rateBody,movie_id);            }        });        back=findViewById(R.id.back);        genres=new ArrayList<>();        genres_list.setHasFixedSize(true);        recyclerViewlayoutManager = new LinearLayoutManager(this,LinearLayoutManager.HORIZONTAL, false);        genres_list.setLayoutManager(recyclerViewlayoutManager);        genresAdapter = new genre_adapter(genres,this);        genres_list.setAdapter(genresAdapter);        recyclerViewlayoutManagertwo= new LinearLayoutManager(this);        movies=new ArrayList<>();        recommended_movie.setHasFixedSize(true);        recommended_movie.setLayoutManager(recyclerViewlayoutManagertwo);        movieAdapter=new movie_adapter(movies,this);        recommended_movie.setAdapter(movieAdapter);        movieAdapter.setOnMovieClickListener(new clickListener() {            @Override            public void onItemClick(int postion) {                // carry movie id to details activity                int movie_id=movies.get(postion).getId();                getMovieDetails(movie_id);                getRecommendedMovie(movie_id);            }        });        back.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                finish();            }        });        getMovieDetails(movie_id);        getRecommendedMovie(movie_id);    }    // get movie details    public void getMovieDetails(int id){        // get movie details        String url = conf.GET_DETAILS+id+"?api_key="+ BuildConfig.api_key+"&language="+StaticHelpers.language;        RequestQueue requestQueue = Volley.newRequestQueue(this);        JsonObjectRequest movieDeatilsRequest = new JsonObjectRequest(Request.Method.GET,url,null,                new Response.Listener<JSONObject>() {                    @Override                    public void onResponse(JSONObject response) {                        try{                            decodeMovieDetails(response);                        } catch(Exception e){                            Log.e("error",e.getMessage());                        }                    }                },                new Response.ErrorListener() {                    @Override                    public void onErrorResponse(VolleyError error) {                        Log.i("error",error.getMessage());                        Toast.makeText(details.this, "something went wrong, please try again", Toast.LENGTH_SHORT).show();                    }                }        );        requestQueue.add(movieDeatilsRequest);    }    // decode movie details response    public void decodeMovieDetails(JSONObject detailsObj){        try{            title.setText(detailsObj.getString("title"));            overview.setText(detailsObj.getString("overview"));            release_year.setText(convertdate(detailsObj.getString("release_date")));            movie_rate.setRating(detailsObj.getInt("vote_average")/2);            Picasso.with(this)                    .load(conf.BASE_URL_IMAGE+detailsObj.getString("poster_path"))                    .into(movie_poster);            // genres            genres.clear();            JSONArray genresArray=detailsObj.getJSONArray("genres");             // decode genre json array            for(int a=0;a<genresArray.length();a++)            {                JSONObject obj=genresArray.getJSONObject(a);                int id=obj.getInt("id");                String genre_name=obj.getString("name");                genre_data=new genre();                genre_data.setId(id);                genre_data.setName(genre_name);                genres.add(genre_data);                genresAdapter.notifyDataSetChanged();            }        }catch (JSONException e){            e.printStackTrace();        }    }    // get recommended movie    public void getRecommendedMovie(int movie_id){        // get recommended movie        String url = conf.GET_RECOMMENDED_MOVIE+movie_id+"/similar?api_key="+ BuildConfig.api_key+"&language="+StaticHelpers.language;        RequestQueue requestQueue = Volley.newRequestQueue(this);        JsonObjectRequest recommendedMoviesRequest = new JsonObjectRequest(Request.Method.GET,url,null,                new Response.Listener<JSONObject>() {                    @Override                    public void onResponse(JSONObject response) {                        Log.i("recommended movie",response.toString());                        try{                            decodeRecommendedMovies(response.getJSONArray("results"));                        } catch(Exception e){                            Log.e("error",e.getMessage());                        }                    }                },                new Response.ErrorListener() {                    @Override                    public void onErrorResponse(VolleyError error) {                        Log.i("error",error.getMessage());                        Toast.makeText(details.this, "something went wrong, please try again", Toast.LENGTH_SHORT).show();                    }                }        );        requestQueue.add(recommendedMoviesRequest);    }    // decode recommended movies    public void decodeRecommendedMovies(JSONArray r_movies){        // clear movie list        movies.clear();        try        {            //add movies to list and also notify our adapter            for(int a=0;a<r_movies.length();a++)            {                JSONObject obj=r_movies.getJSONObject(a);                int id=obj.getInt("id");                String title=obj.getString("title");                String release_date=obj.getString("release_date");                String poster_path=obj.getString("poster_path");                double vote_count =obj.getDouble("vote_count");                double vote_average=obj.getDouble("vote_average")/2;                double popularity=obj.getDouble("popularity");                movie_data=new movie();                movie_data.setId(id);                movie_data.setTitle(title);                movie_data.setRelease_date(release_date);                movie_data.setPoster_path(poster_path);                movie_data.setVote_count(vote_count);                movie_data.setVote_average(vote_average);                movie_data.setPopularity(popularity);                movies.add(movie_data);                movieAdapter.notifyDataSetChanged();            }        }        catch(JSONException e)        {            e.printStackTrace();        }    }    // mark as fovorite movie    public void markFavoriteMovie(HashMap favoriteMovie){        Toast.makeText(details.this, "Marking...", Toast.LENGTH_SHORT).show();        String url=conf.MARK_FAVORITE_MOVIE+"?api_key="+BuildConfig.api_key+"&session_id="+prefManager.getUserSession(pref);        RequestQueue requestQueue = Volley.newRequestQueue(this);        JsonObjectRequest loginRequest = new JsonObjectRequest(Request.Method.POST, url,new JSONObject(favoriteMovie),                new Response.Listener<JSONObject>() {                    @Override                    public void onResponse(JSONObject response) {                        Log.i("favorite",response.toString());                        try{                            if(response.getBoolean("success")==true){                                Toast.makeText(details.this, "Movie marked as favorite successful!", Toast.LENGTH_LONG).show();                            }else{                                Toast.makeText(details.this, "not marked as favorite!", Toast.LENGTH_SHORT).show();                            }                        }catch (JSONException e){                            e.printStackTrace();                        }                    }                },                new Response.ErrorListener() {                    @Override                    public void onErrorResponse(VolleyError error) {                    }                }        );        requestQueue.add(loginRequest);    }    //rating movie    public void rateMovie(HashMap rateBody,int movie_id){        Toast.makeText(details.this, "Rating...", Toast.LENGTH_SHORT).show();        String url=conf.RATE_MOVIE+movie_id+"/rating?api_key="+BuildConfig.api_key+"&session_id="+prefManager.getUserSession(pref);        RequestQueue requestQueue = Volley.newRequestQueue(this);        JsonObjectRequest loginRequest = new JsonObjectRequest(Request.Method.POST, url,new JSONObject(rateBody),                new Response.Listener<JSONObject>() {                    @Override                    public void onResponse(JSONObject response) {                        movie_rate.setIsIndicator(true);                        button_rate_movie.setVisibility(View.GONE);                        rate.setVisibility(View.VISIBLE);                        Log.i("rate",response.toString());                        try{                            if(response.getBoolean("success")==true){                                Toast.makeText(details.this, "Movie rated successful! ", Toast.LENGTH_LONG).show();                            }else{                                Toast.makeText(details.this, "not rated!", Toast.LENGTH_SHORT).show();                            }                        }catch (JSONException e){                            e.printStackTrace();                        }                    }                },                new Response.ErrorListener() {                    @Override                    public void onErrorResponse(VolleyError error) {                        movie_rate.setIsIndicator(true);                    }                }        );        requestQueue.add(loginRequest);    }}